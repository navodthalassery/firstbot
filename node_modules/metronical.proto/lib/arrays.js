(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @module metronical.proto
     */
    function a(value) {
        return new _a(value);
    }
    exports.a = a;
    class _a {
        constructor(_value = []) {
            this._value = _value;
            this.value = this._value;
        }
        empty() {
            this.value = this.value.splice(0, this.value.length);
            return this;
        }
        isEmpty() {
            if (this.value.length === 0) {
                return true;
            }
            return false;
        }
        each(callback) {
            for (let i = 0; i < this.value.length; i++) {
                callback(i, this[i]);
            }
        }
        remove(item) {
            let index = this.value.indexOf(item);
            if (index != -1) {
                this.value = this.value.splice(index, 1);
                return this;
            }
            return null;
        }
        contains(partial, strict) {
            for (let i = 0; i < this.value.length; i++) {
                if (!strict && this[i].contains(partial)) {
                    return true;
                }
                if (strict && this[i] === partial) {
                    return true;
                }
            }
            return false;
        }
        indexOfPartial(partial) {
            for (let i = 0; i < this.value.length; i++) {
                if (this[i].contains(partial)) {
                    return i;
                }
            }
            return -1;
        }
        toObjectArray(objName) {
            if (objName === undefined || objName === null) {
                throw 'Error: Property name must be provided for conversion.';
            }
            let items = this;
            if (typeof (items[0]) === 'string' || typeof (items[0]) === 'number' || typeof (items[0]) === 'boolean') {
                for (let i = 0; i < items.length; i++) {
                    let val = items[i];
                    items[i] = {};
                    items[i][objName] = val;
                }
                return items;
            }
            else {
                return this;
            }
        }
        toArray() {
            return this.value;
        }
    }
});
//# sourceMappingURL=arrays.js.map