(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @module metronical.proto
     */
    function s(value) {
        return new _s(value);
    }
    exports.s = s;
    class _s {
        constructor(_value = "") {
            this._value = _value;
            this.value = this._value;
        }
        lower() {
            this.value = this.value.toLocaleLowerCase();
            return this;
        }
        upper() {
            this.value = this.value.toUpperCase();
            return this;
        }
        trim() {
            this.value = this.value.replace(/^\s+|\s+$/g, "");
            return this;
        }
        ltrim() {
            this.value = this.value.replace(/^\s+/, "");
            return this;
        }
        rtrim() {
            this.value = this.value.replace(/\s+$/, "");
            return this;
        }
        normalize() {
            this.value = this.value.replace(/^\s*|\s(?=\s)|\s*$/g, "");
            return this;
        }
        startsWith(part, pos) {
            return this.value.slice(0, part.length) == part;
        }
        endsWith(part, pos) {
            return this.value.slice(part.length) == part;
        }
        capFirst() {
            if (this.value.length == 1) {
                this.value = this.value.toUpperCase();
                return this;
            }
            else if (this.value.length > 0) {
                let regex = /^(\(|\[|"|')/;
                if (regex.test(this.value)) {
                    this.value = this.value.substring(0, 2).toUpperCase() + this.value.substring(2);
                    return this;
                }
                else {
                    this.value = this.value.substring(0, 1).toUpperCase() + this.value.substring(1);
                    return this;
                }
            }
            return null;
        }
        capWords() {
            let regexp = /\s/;
            let words = this.value.split(regexp);
            if (words.length == 1) {
                return s(words[0]).capFirst();
            }
            else if (words.length > 1) {
                let result = '';
                for (let i = 0; i < words.length; i++) {
                    if (s(words[i]).capFirst() !== null) {
                        result += s(words[i]).capFirst() + ' ';
                    }
                }
                this.value = result.trim();
                return this;
            }
            return null;
        }
        truncateWords(num) {
            let words = this.value.split(/\s+/);
            if (words.length > num) {
                this.value = words.slice(0, num).join(' ');
                return this;
            }
            this.value = words.join(' ');
            return this;
        }
        truncateWordsWithHtml(num) {
            let tags = [];
            let truncation = this.truncateWords(num).toString();
            let matches = truncation.match(/<[\/]?([^> ]+)[^>]*>/g);
            for (let i = 0; i < matches.length; i++) {
                let opening = matches[i].replace('/', '');
                if (matches[i].indexOf('/') != -1 && tags.indexOf(opening) != -1) {
                    tags.remove(opening);
                }
                else if (matches[i].indexOf('/') != -1) {
                    continue;
                }
                else {
                    tags.push(matches[i]);
                }
            }
            for (let i = 0; i < tags.length; i++) {
                truncation += tags[i].replace('<', '</').replace(/(\s*)(\w+)=("[^<>"]*"|'[^<>']*'|\w+)/g, '');
            }
            return s(truncation);
        }
        stripHtml() {
            let content = this.value.replace(/<[\/]?([^> ]+)[^>]*>/g, '');
            content = content.replace(/<style[^>]*>[\s\S]*?<\/style>/ig, '');
            content = content.replace(/<script[^>]*>[\s\S]*?<\/script>/ig, '');
            content = content.replace(/<!--[\s\S]*?-->/g, '');
            content = content.replace('&nbsp;', ' ');
            content = content.replace('&amp;', '&');
            this.value = content;
            return this;
        }
        escapeHtml() {
            let content = this.value.replace(/"/g, '&quot;');
            content.replace(/&(?!\w+;)/g, '&amp;');
            content.replace(/>/g, '&gt;');
            content.replace(/</g, '&lt;');
            this.value = content;
            return this;
        }
        toBool() {
            if (this.isNullOrEmpty()) {
                return false;
            }
            else if (this.lower().toString() === "true" || this.lower().toString() === "1" || this.lower().toString() === "y" || this.lower().toString() === "t") {
                return true;
            }
            return false;
        }
        contains(val) {
            if (this.value.indexOf(val) !== -1) {
                return true;
            }
            return false;
        }
        slugify(lower = true) {
            if (!lower) {
                this.value = this.lower().normalize().toString().replace(/[^a-z0-9]/gi, '-');
                return this;
            }
            this.value = this.normalize().toString().replace(/[^a-z0-9]/gi, '-');
            return this;
        }
        getValueByKey(key) {
            var collection = this.value.split(";");
            for (let i = 0; i < collection.length; i++) {
                if (s(collection[i]).contains(":")) {
                    let pairs = collection[i].split(":");
                    if (pairs[0] == key) {
                        return pairs[1];
                    }
                }
            }
            return null;
        }
        setValueByKey(key, replacement) {
            var collection = this.value.split(";");
            var returnCollection = [];
            for (let i = 0; i < collection.length; i++) {
                if (s(collection[i]).contains(":")) {
                    let pairs = collection[i].split(":");
                    if (pairs[0] == key) {
                        pairs[1] = replacement;
                    }
                    returnCollection.push(pairs.join(":"));
                }
            }
            return s(returnCollection.join(';'));
        }
        isNullOrEmpty() {
            if (this.value === undefined || this.value === null || this.value.trim() === '') {
                return true;
            }
            return false;
        }
        toString() {
            return this.value;
        }
    }
});
//# sourceMappingURL=strings.js.map